{"version":3,"sources":["reducers/index.js","modules/topic/index.js","modules/date/index.js","modules/comments/form.js","modules/comments/index.js","actions/index.js","index.js"],"names":["setValue","store","type","val","newStore","add","reducer","action","author","text","date","arr","localStorage","getItem","JSON","parse","push","name","btn","removeItem","setItem","stringify","list","loadList","addComment","idx","forEach","item","i","delComment","toggleBtn","makeTopic","json","className","title","content","map","p","key","details","getDate","Date","day","slice","month","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","Form","props","addNewComment","setAuthorValue","setTextValue","onSubmit","ev","preventDefault","htmlFor","id","required","placeholder","value","onChange","document","querySelector","CommentsList","onMouseOver","onMouseOut","onClick","window","confirm","Comments","connect","dispatch","noList","length","initState","createStore","renderMain","topic","ReactDOM","render","fetch","then","response","ok"],"mappings":"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","file":"static/js/main.37d04c7b.chunk.js","sourcesContent":["import {loadList} from '../index';\r\n\r\nconst setValue = (store, {val}, type) => {\r\n  const newStore = {...store};\r\n\r\n  newStore.add[type] = val;\r\n\r\n  return newStore;\r\n}\r\n\r\nconst addComment = (store, {author, text, date}) => {\r\n  const newStore = {...store};\r\n  const arr = (localStorage.getItem('commentsList'))\r\n      ? JSON.parse(localStorage.getItem('commentsList'))\r\n      : [];\r\n\r\n  arr.push({\r\n    name: author,\r\n    text: text,\r\n    date: date,\r\n    btn: false\r\n  });\r\n\r\n  localStorage.removeItem('commentsList');\r\n  localStorage.setItem('commentsList', JSON.stringify(arr));\r\n\r\n  newStore.add.author = '';\r\n  newStore.add.text = '';\r\n\r\n  newStore.list = loadList();\r\n  return newStore;\r\n}\r\n\r\nconst delComment = (store, {idx}) => {\r\n  const newStore = {...store};\r\n  const arr = [];\r\n\r\n  newStore.list.forEach((item, i) => {\r\n    if (i !== idx) arr.push(item);\r\n  });\r\n\r\n  localStorage.removeItem('commentsList');\r\n  localStorage.setItem('commentsList', JSON.stringify(arr));\r\n\r\n  newStore.list = loadList();\r\n\r\n  return newStore;\r\n}\r\n\r\nconst toggleBtn = (store, {idx, val}) => {\r\n  const newStore = {...store};\r\n  newStore.list[idx].btn = val;\r\n  return newStore;\r\n}\r\n\r\nconst reducer = (store, action) => {\r\n  switch (action.type) {\r\n    case 'SET_AUTHOR_VALUE': return setValue(store, action, 'author');\r\n    case 'SET_TEXT_VALUE': return setValue(store, action, 'text');\r\n    case 'ADD_NEW_COMMENT': return addComment(store, action);\r\n    case 'DEL_COMMENT': return delComment(store, action);\r\n    case 'TOGGLE_BTN': return toggleBtn(store, action);\r\n    default: return store;\r\n  }\r\n}\r\n\r\nexport default reducer;","import React from 'react';\r\nimport './index.css';\r\n\r\nconst makeTopic = (json) => {\r\n return (json) ? (\r\n     <article className=\"topic\">\r\n       <h2 className=\"topic__title\">{json.title}</h2>\r\n       {\r\n         json.content.map((p, i) => {\r\n           return (\r\n               <p key={i} className=\"topic__p\">\r\n                 {p}\r\n               </p>\r\n           )\r\n         })\r\n       }\r\n       <address className=\"topic__author\">\r\n         <span className=\"topic__name\">{json.details.name}</span>\r\n         <span className=\"topic__date\">{json.details.date}</span>\r\n       </address>\r\n     </article>\r\n ) : (\r\n     <div className=\"topic\">\r\n       <div className=\"error-wrapper\">\r\n         <p className=\"error\">Ошибка сервера</p>\r\n       </div>\r\n     </div>\r\n );\r\n}\r\n\r\nexport default makeTopic;","const getDate = () => {\r\n  const date = new Date();\r\n  const day = `0${date.getDate()}`.slice(-2);\r\n  const month = `0${date.getMonth()}`.slice(-2);\r\n  const year = date.getFullYear();\r\n  const hours = `0${date.getHours()}`.slice(-2);\r\n  const minutes = `0${date.getMinutes()}`.slice(-2);\r\n\r\n  return `${year}-${month}-${day} ${hours}:${minutes}`;\r\n}\r\n\r\nexport default getDate;","import React from \"react\";\r\nimport './form.css';\r\nimport getDate from \"../date\";\r\n\r\nconst Form = props => {\r\n  const {store, addNewComment, setAuthorValue, setTextValue} = props;\r\n\r\n  return (\r\n      <form action=\"#\"\r\n            className=\"comments__form\"\r\n            onSubmit={ev => {\r\n              ev.preventDefault();\r\n              return addNewComment(store.add.author, store.add.text, getDate());\r\n            }}>\r\n        <label htmlFor=\"author\" className=\"visually-hidden\">Имя:</label>\r\n        <input type=\"text\" id=\"author\" required={true}\r\n               className=\"comments__author\"\r\n               placeholder=\"Ваше имя\"\r\n               value={store.add.author}\r\n               onChange={() => setAuthorValue(document.querySelector('.comments__author').value)}/>\r\n        <label htmlFor=\"text\" className=\"visually-hidden\">Текст комментария:</label>\r\n        <textarea id=\"text\" required={true}\r\n                  className=\"comments__textarea\"\r\n                  placeholder=\"Ваш комментарий\"\r\n                  value={store.add.text}\r\n                  onChange={() => setTextValue(document.querySelector('.comments__textarea').value)}/>\r\n        <input type=\"submit\" className=\"comments__submit\" value=\"Оставить комментарий\"/>\r\n      </form>\r\n  )\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport './index.css';\r\nimport Form from './form';\r\nimport {setAuthorValue, delComment, addNewComment, setTextValue, toggleBtn} from '../../actions';\r\n\r\nconst CommentsList = props => {\r\n  const {store, delComment, toggleBtn} = props;\r\n\r\n  return (\r\n      <ul className=\"comments__list\">\r\n        {\r\n          store.list.map((item, i) => {\r\n            return (typeof item === 'object') ? (\r\n                <li key={i}\r\n                    className=\"comments__item\"\r\n                    onMouseOver={() => toggleBtn(i, true)}\r\n                    onMouseOut={() => toggleBtn(i, false)}>\r\n                  <div className=\"comments__user\">\r\n                    <h3 className=\"comments__name\">\r\n                      {item.name}\r\n                    </h3>\r\n                    <span className=\"comments__date\">\r\n                        {item.date}\r\n                      </span>\r\n                  </div>\r\n                  <p className=\"comments__text\">\r\n                    {item.text}\r\n                  </p>\r\n                  <div className=\"comments__actions\">\r\n                    <button key={i} className={\r\n                      (item.btn)\r\n                          ? \"comments__del comments__del--active\"\r\n                          : \"comments__del\"}\r\n                            onClick={() => {\r\n                              const userAnswer = window.confirm('Вы действительно хотите удалить комментарий?');\r\n                              if (!userAnswer) return;\r\n                              return delComment(i);\r\n                            }}>\r\n                      удалить\r\n                    </button>\r\n                  </div>\r\n                </li>\r\n            ) : (\r\n                <li key={i} className=\"comments__nothing\">\r\n                  {item}\r\n                </li>\r\n            );\r\n          })\r\n        }\r\n      </ul>\r\n  );\r\n}\r\n\r\nlet Comments = (props) => {\r\n  const {\r\n    store, setAuthorValue, setTextValue, addNewComment, delComment, toggleBtn\r\n  } = props;\r\n\r\n  return (\r\n      <div className=\"comments\">\r\n        <h2 className=\"comments__title\">Комментарии</h2>\r\n        <CommentsList\r\n            store={store}\r\n            delComment={delComment}\r\n            toggleBtn={toggleBtn}\r\n        />\r\n        <Form\r\n            store={store}\r\n            addNewComment={addNewComment}\r\n            setAuthorValue={setAuthorValue}\r\n            setTextValue={setTextValue}\r\n        />\r\n      </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    store: store\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setAuthorValue: val => dispatch(setAuthorValue(val)),\r\n    delComment: idx => dispatch(delComment(idx)),\r\n    addNewComment: (author, text, date) => dispatch(addNewComment(author, text, date)),\r\n    setTextValue: val => dispatch(setTextValue(val)),\r\n    toggleBtn: (idx, val) => dispatch(toggleBtn(idx, val))\r\n  }\r\n}\r\n\r\nComments = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Comments);\r\n\r\nexport default Comments;","export const setAuthorValue = val => {\r\n  return {\r\n    type: 'SET_AUTHOR_VALUE',\r\n    val\r\n  }\r\n}\r\n\r\nexport const setTextValue = val => {\r\n  return {\r\n    type: 'SET_TEXT_VALUE',\r\n    val\r\n  }\r\n}\r\n\r\nexport const addNewComment = (author, text, date) => {\r\n  return {\r\n    type: 'ADD_NEW_COMMENT',\r\n    author,\r\n    text,\r\n    date\r\n  }\r\n}\r\n\r\nexport const delComment = idx => {\r\n  return {\r\n    type: 'DEL_COMMENT',\r\n    idx\r\n  }\r\n}\r\n\r\nexport const toggleBtn = (idx, val) => {\r\n  return {\r\n    type: 'TOGGLE_BTN',\r\n    idx,\r\n    val\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {createStore} from 'redux';\r\nimport reducer from './reducers';\r\nimport './index.css';\r\nimport makeTopic from './modules/topic';\r\nimport Comments from './modules/comments';\r\n\r\nexport const loadList= () => {\r\n  const list = JSON.parse(localStorage.getItem('commentsList'));\r\n  const noList = ['Нет комментариев.'];\r\n  return (!list) ? noList : (list.length) ? list : noList;\r\n}\r\n\r\nconst initState = {\r\n  list: loadList(),\r\n  add: {author: '', text: ''}\r\n}\r\n\r\nconst store = createStore(reducer, initState);\r\n\r\nconst renderMain = topic => {\r\n  ReactDOM.render(\r\n      <div className=\"wrapper\">\r\n        {topic}\r\n        <Comments store={store} />\r\n      </div>,\r\n      document.querySelector('.main')\r\n  )\r\n}\r\n\r\nconst getData = () => {\r\n  fetch('https://maxkiner.github.io/server/topic.json')\r\n      .then(response => {\r\n        (response.ok)\r\n            ? response.json().then(json => renderMain(makeTopic(json)))\r\n            : renderMain(makeTopic(null));\r\n      });\r\n}\r\n\r\ngetData();"],"sourceRoot":""}